name: CI

on:
  push:
    branches: [main, master]
  pull_request:
    branches: [main, master]
  workflow_dispatch:

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: oven-sh/setup-bun@v1
        with:
          bun-version: latest
      - name: Lint (biome)
        run: |
          if [ -f biome.json ]; then bunx biome check .; else echo 'No biome config'; fi

  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [18.x, 20.x]
        bun-version: [1.0.0, 1.2.15]
    steps:
      - uses: actions/checkout@v4
      - uses: oven-sh/setup-bun@v1
        with:
          bun-version: ${{ matrix.bun-version }}
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
      - name: Install dependencies
        run: bun install
      - name: Run tests
        run: bun run test

  validate-json:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Validate JSON files
        run: |
          find . -name '*.json' -not -path './node_modules/*' -exec bunx jsonlint {} +

  audit:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: oven-sh/setup-bun@v1
        with:
          bun-version: latest
      - name: Audit dependencies
        run: |
          if [ -f package-lock.json ]; then npm audit --audit-level=moderate; else echo 'No package-lock.json'; fi

  check-version-coherence:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Check config.json and docker-compose.json version coherence
        run: |
          for app in apps/*; do
            if [ -f "$app/config.json" ] && [ -f "$app/docker-compose.json" ]; then
              config_version=$(jq -r .version "$app/config.json")
              compose_version=$(jq -r '.services[0].image' "$app/docker-compose.json" | grep -oE ':[^:]+$' | tr -d ':')
              if [ "$config_version" != "$compose_version" ]; then
                echo "Version mismatch in $app: config.json=$config_version, docker-compose.json=$compose_version" && exit 1
              fi
            fi
          done

  cleanup-renovate-branches:
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
      - uses: actions/checkout@v4
      - name: Delete merged Renovate branches
        uses: beatlabs/delete-merged-branch@v2
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          exclude: main,master
          only_renovate: true

  trigger-renovate:
    runs-on: ubuntu-latest
    if: github.event.label.name == 'rebase/retry' && github.event_name == 'labeled'
    steps:
      - name: Call Renovate webhook
        run: |
          echo 'Triggering Renovate via webhook or API (Ã  configurer selon ton instance)'
