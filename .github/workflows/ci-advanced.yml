name: CI

on:
  push:
    branches: [main, master]
  pull_request:
    branches: [main, master]
  workflow_dispatch:

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: oven-sh/setup-bun@v1
        with:
          bun-version: latest
      - name: Lint (biome)
        run: |
          if [ -f biome.json ]; then bunx biome check .; else echo 'No biome config'; fi

  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: oven-sh/setup-bun@v1
        with:
          bun-version: latest
      - name: Install dependencies
        run: bun install
      - name: Run tests
        run: bun test

  # dependabot-auto-merge:
  #   runs-on: ubuntu-22.04
  #   steps:
  #     - uses: actions/checkout@v4
  #     - name: Enable auto-merge for Dependabot PRs
  #       uses: ahmadnassri/action-dependabot-auto-merge@v2
  #       with:
  #         github-token: ${{ secrets.GITHUB_TOKEN }}
  #         merge-method: squash

  update-configs-renovate:
    runs-on: ubuntu-latest
    if: github.actor == 'renovate[bot]'
    steps:
      - uses: actions/checkout@v4
      - name: Get list of apps changed in the PR
        id: changed_apps
        uses: tj-actions/changed-files@v44
        with:
          files: apps/*/docker-compose.json

      - name: Update config.json only for changed apps (PR Renovate)
        if: steps.changed_apps.outputs.any_changed == 'true'
        shell: pwsh
        run: |
          $changed = "${{ steps.changed_apps.outputs.all_changed_files }}" -split '\s+'
          foreach ($compose in $changed) {
            $app = Split-Path $compose -Parent
            $config = Join-Path $app 'config.json'
            if (Test-Path $config -PathType Leaf) {
              $composeJson = Get-Content $compose | ConvertFrom-Json
              $mainService = $composeJson.services | Where-Object { $_.isMain -eq $true }
              if ($mainService -and $mainService.image) {
                $mainImage = $mainService.image
                $mainVersion = $mainImage.Split(':')[-1]
              } else {
                $mainVersion = (Get-Content $config | ConvertFrom-Json).version
              }
              $configJson = Get-Content $config | ConvertFrom-Json
              $tipiVersion = $configJson.tipi_version
              if ($tipiVersion -match '^[0-9]+$') {
                $newTipiVersion = [int]$tipiVersion + 1
              } else {
                $newTipiVersion = 1
              }
              $updatedAt = [int][double]::Parse((Get-Date -UFormat %s)) * 1000
              $configJson.tipi_version = $newTipiVersion
              $configJson.version = $mainVersion
              $configJson.updated_at = $updatedAt
              $configJson | ConvertTo-Json -Depth 10 | Set-Content $config
            }
          }
