name: CI

on:
  push:
    branches: [main, master]
  pull_request:
    branches: [main, master]
  workflow_dispatch:

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: oven-sh/setup-bun@v1
        with:
          bun-version: latest
      - name: Lint (biome)
        run: |
          if [ -f biome.json ]; then bunx biome check .; else echo 'No biome config'; fi

  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: oven-sh/setup-bun@v1
        with:
          bun-version: latest
      - name: Install dependencies
        run: bun install
      - name: Run tests
        run: bun test

  # dependabot-auto-merge:
  #   runs-on: ubuntu-22.04
  #   steps:
  #     - uses: actions/checkout@v4
  #     - name: Enable auto-merge for Dependabot PRs
  #       uses: ahmadnassri/action-dependabot-auto-merge@v2
  #       with:
  #         github-token: ${{ secrets.GITHUB_TOKEN }}
  #         merge-method: squash

  update-configs-renovate:
    runs-on: ubuntu-latest
    if: github.actor == 'renovate[bot]'
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Get list of apps changed in the PR
        id: changed_apps
        uses: tj-actions/changed-files@v46
        with:
          files: apps/*/docker-compose.json

      - name: Backup previous config.json tipi_version
        if: steps.changed_apps.outputs.any_changed == 'true'
        shell: pwsh
        run: |
          $changed = "${{ steps.changed_apps.outputs.all_changed_files }}" -split '\s+'
          foreach ($compose in $changed) {
            $app = Split-Path $compose -Parent
            $config = Join-Path $app 'config.json'
            $backup = "$config.prev"
            if (Test-Path $config -PathType Leaf) {
              Copy-Item $config $backup -Force
            }
          }

      - name: Update config.json only for changed apps (PR Renovate)
        if: steps.changed_apps.outputs.any_changed == 'true'
        shell: pwsh
        run: |
          $changed = "${{ steps.changed_apps.outputs.all_changed_files }}" -split '\s+'
          foreach ($compose in $changed) {
            $app = Split-Path $compose -Parent
            $config = Join-Path $app 'config.json'
            if (Test-Path $config -PathType Leaf) {
              $composeJson = Get-Content $compose | ConvertFrom-Json
              $mainService = $composeJson.services | Where-Object { $_.isMain -eq $true }
              if ($mainService -and $mainService.image) {
                $mainImage = $mainService.image
                $mainVersion = $mainImage.Split(':')[-1]
              } else {
                $mainVersion = (Get-Content $config | ConvertFrom-Json).version
              }
              $configJson = Get-Content $config | ConvertFrom-Json
              $tipiVersion = $configJson.tipi_version
              if ($tipiVersion -match '^[0-9]+$') {
                $newTipiVersion = [int]$tipiVersion + 1
              } else {
                $newTipiVersion = 1
              }
              # updatedAt doit être un entier sans décimales
              $updatedAt = [int]([double]::Parse((Get-Date -UFormat %s)) * 1000)
              $configJson.tipi_version = $newTipiVersion
              $configJson.version = $mainVersion
              $configJson.updated_at = $updatedAt
              $configJson | ConvertTo-Json -Depth 10 | Set-Content $config
            }
          }

      - name: Check config.json update consistency
        if: steps.changed_apps.outputs.any_changed == 'true'
        shell: pwsh
        run: |
          $errors = 0
          $changed = "${{ steps.changed_apps.outputs.all_changed_files }}" -split '\s+'
          foreach ($compose in $changed) {
            $app = Split-Path $compose -Parent
            $config = Join-Path $app 'config.json'
            if (Test-Path $config -PathType Leaf) {
              $composeJson = Get-Content $compose | ConvertFrom-Json
              $mainService = $composeJson.services | Where-Object { $_.isMain -eq $true }
              if ($mainService -and $mainService.image) {
                $mainImage = $mainService.image
                $mainVersion = $mainImage.Split(':')[-1]
              } else {
                $mainVersion = $null
              }
              $configJson = Get-Content $config | ConvertFrom-Json
              $configVersion = $configJson.version
              $configUpdatedAt = $configJson.updated_at
              $configTipiVersion = $configJson.tipi_version

              # Check version consistency
              if ($mainVersion -and $configVersion -ne $mainVersion) {
                Write-Host "❌ Version mismatch in $($app): config.json version '$($configVersion)' != docker-compose version '$($mainVersion)'"
                $errors++
              } else {
                Write-Host "✔ Version match in $($app): $($configVersion)"
              }

              # Check that updated_at was updated (must be greater than previous value if available)
              $previousTipiVersionFile = "$config.prev"
              $prevUpdatedAt = $null
              if (Test-Path $previousTipiVersionFile) {
                $prevUpdatedAt = (Get-Content $previousTipiVersionFile | ConvertFrom-Json).updated_at
                if ([int64]$configUpdatedAt -le [int64]$prevUpdatedAt) {
                  Write-Host "❌ updated_at field in $($app) is not greater than previous: $($configUpdatedAt) (previous: $($prevUpdatedAt))"
                  $errors++
                } else {
                  Write-Host "✔ updated_at field in $($app) is greater than previous: $($configUpdatedAt) (previous: $($prevUpdatedAt))"
                }
              } else {
                # Fallback: Check that updated_at is recent (timestamp > 0 and < now + 1min)
                $now = [int][double]::Parse((Get-Date -UFormat %s)) * 1000
                if ($configUpdatedAt -lt ($now - 60000) -or $configUpdatedAt -gt ($now + 60000)) {
                  Write-Host "❌ updated_at field in $($app) is not recent: $($configUpdatedAt) (now: $($now))"
                  $errors++
                } else {
                  Write-Host "✔ updated_at field in $($app) is recent: $($configUpdatedAt)"
                }
              }

              # Check that tipi_version was incremented by 1 (compare with previous version if available)
              if (Test-Path $previousTipiVersionFile) {
                $prevTipiVersion = (Get-Content $previousTipiVersionFile | ConvertFrom-Json).tipi_version
                if ([int]$configTipiVersion -ne ([int]$prevTipiVersion + 1)) {
                  Write-Host "❌ tipi_version in $($app) did not increment by 1: $($configTipiVersion) (previous: $($prevTipiVersion))"
                  $errors++
                } else {
                  Write-Host "✔ tipi_version in $($app) incremented by 1: $($configTipiVersion) (previous: $($prevTipiVersion))"
                }
              } else {
                Write-Host "⚠ No previous tipi_version found for $($app), skipping tipi_version check."
              }
            }
          }
          if ($errors -gt 0) {
            Write-Error "Some config.json files are not consistent. See errors above."
            exit 1
          } else {
            Write-Host "All config.json files are consistent."
          }

      - name: Commit and push config.json updates
        if: steps.changed_apps.outputs.any_changed == 'true'
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git fetch origin ${{ github.head_ref }}:${{ github.head_ref }}
          git checkout ${{ github.head_ref }}
          git add apps/*/config.json
          git commit -m "ci: update config.json after renovate docker-compose update" || echo "No changes to commit"
          git push origin HEAD:${{ github.head_ref }}
