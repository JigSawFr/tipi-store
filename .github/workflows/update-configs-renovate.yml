name: Update & Validate Metadata & Configs of Upgraded Apps

on:
  push:
    branches: [main, master]
  pull_request:
    branches: [main, master]
  workflow_dispatch:

jobs:
  update-and-validate-configs-renovate:
    runs-on: ubuntu-latest
    if: github.actor == 'renovate[bot]'
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Get list of apps changed in the PR
        id: changed_apps
        uses: tj-actions/changed-files@v46
        with:
          files: apps/*/docker-compose.json

      - name: Generate changelog for updated apps
        if: steps.changed_apps.outputs.any_changed == 'true'
        id: generate_changelog
        shell: pwsh
        env:
          CHANGED_FILES: ${{ steps.changed_apps.outputs.all_changed_files }}
        run: |
          $files = $env:CHANGED_FILES -split ' '
          $apps = $files | ForEach-Object { Split-Path $_ -Parent } | Select-Object -Unique
          pwsh ./.github/scripts/generate-changelog.ps1 -ChangedApps $apps
          $content = Get-Content .github/renovate-changelogs.md -Raw
          # Write output for next step
          echo "changelog_content<<EOF" >> $env:GITHUB_OUTPUT
          echo "$content" >> $env:GITHUB_OUTPUT
          echo "EOF" >> $env:GITHUB_OUTPUT
          # Also write to a file for path input fallback
          $content | Set-Content changelog-comment.txt

      - name: Post changelog as PR comment
        if: steps.changed_apps.outputs.any_changed == 'true'
        uses: marocchino/sticky-pull-request-comment@v2
        with:
          path: changelog-comment.txt
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        id: post_changelog

      - name: Backup previous config.json tipi_version
        if: steps.changed_apps.outputs.any_changed == 'true'
        shell: pwsh
        env:
          CHANGED_FILES: ${{ steps.changed_apps.outputs.all_changed_files }}
        run: |
          pwsh ./.github/scripts/backup-config.ps1

      - name: Update config.json only for changed apps (PR Renovate)
        if: steps.changed_apps.outputs.any_changed == 'true'
        shell: pwsh
        env:
          CHANGED_FILES: ${{ steps.changed_apps.outputs.all_changed_files }}
        run: |
          pwsh ./.github/scripts/update-config.ps1

      - name: Check config.json update consistency
        if: steps.changed_apps.outputs.any_changed == 'true'
        shell: pwsh
        env:
          CHANGED_FILES: ${{ steps.changed_apps.outputs.all_changed_files }}
        run: |
          pwsh ./.github/scripts/validate-config.ps1

      - name: Commit and push config.json updates
        if: steps.changed_apps.outputs.any_changed == 'true'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git fetch origin ${{ github.head_ref }}:${{ github.head_ref }}
          git checkout ${{ github.head_ref }}
          git add apps/*/config.json
          git commit -m "ci: update config.json after renovate docker-compose update" --signoff || echo "No changes to commit"
          git remote set-url origin https://x-access-token:${GITHUB_TOKEN}@github.com/${{ github.repository }}.git
          git push origin HEAD:${{ github.head_ref }}
