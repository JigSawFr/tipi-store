name: Update & Validate Metadata & Configs of Upgraded Apps

on:
  push:
    branches: [main, master]
  pull_request:
    branches: [main, master]
  workflow_dispatch:

jobs:
  # Debug job to log workflow context for troubleshooting
  debug-context:
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    steps:
      - name: Debug workflow context
        run: |
          echo "üîç Debugging workflow execution context"
          echo "Event name: ${{ github.event_name }}"
          echo "Actor: ${{ github.actor }}"
          echo "Repository: ${{ github.repository }}"
          echo "PR number: ${{ github.event.pull_request.number }}"
          echo "PR title: ${{ github.event.pull_request.title }}"
          echo "PR author: ${{ github.event.pull_request.user.login }}"
          echo "Base ref: ${{ github.base_ref }}"
          echo "Head ref: ${{ github.head_ref }}"
          echo "Is Renovate bot: ${{ github.actor == 'renovate[bot]' }}"

  # Job for Renovate PRs - handles automatic updates and merging
  update-and-validate-configs-renovate:
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request' && (github.actor == 'renovate[bot]' || contains(github.event.pull_request.user.login, 'renovate'))
    needs: debug-context
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Get list of apps changed in the PR
        id: changed_apps
        uses: tj-actions/changed-files@v46
        with:
          files: apps/*/docker-compose.json

      - name: Backup previous config.json tipi_version
        if: steps.changed_apps.outputs.any_changed == 'true'
        shell: pwsh
        env:
          CHANGED_FILES: ${{ steps.changed_apps.outputs.all_changed_files }}
        run: |
          pwsh ./.github/scripts/backup-config.ps1

      - name: Update config.json only for changed apps (PR Renovate)
        if: steps.changed_apps.outputs.any_changed == 'true'
        shell: pwsh
        env:
          CHANGED_FILES: ${{ steps.changed_apps.outputs.all_changed_files }}
        run: |
          pwsh ./.github/scripts/update-config.ps1

      - name: Check config.json update consistency
        if: steps.changed_apps.outputs.any_changed == 'true'
        shell: pwsh
        env:
          CHANGED_FILES: ${{ steps.changed_apps.outputs.all_changed_files }}
        run: |
          pwsh ./.github/scripts/validate-config.ps1

      - name: Commit and push config.json updates
        if: steps.changed_apps.outputs.any_changed == 'true'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git fetch origin ${{ github.head_ref }}:${{ github.head_ref }}
          git checkout ${{ github.head_ref }}
          git add apps/*/config.json
          git commit -m "ci: update config.json after renovate docker-compose update" --signoff || echo "No changes to commit"
          git remote set-url origin https://x-access-token:${GITHUB_TOKEN}@github.com/${{ github.repository }}.git
          git push origin HEAD:${{ github.head_ref }}

      - name: Check if update is major version
        if: steps.changed_apps.outputs.any_changed == 'true'
        id: check_major
        shell: pwsh
        run: |
          $isMajor = $false
          $prBody = @"
          ${{ github.event.pull_request.body }}
          "@
          
          Write-Output "=== PR Body Analysis ==="
          Write-Output $prBody
          Write-Output "========================="
          
          # Pattern 1: Check for "major" keyword in update type column
          if ($prBody -match "\|\s*major\s*\|" -or $prBody -match "Type.*major") {
            $isMajor = $true
            Write-Output "‚úì Major version detected: 'major' keyword found in table"
          }          # Pattern 2: Check for version jump pattern (e.g., 1.x.x -> 2.x.x)
          # Look for version numbers with arrow between them, but be more careful about context
          if ($prBody -match '(\d+)\.\d+\.\d+.*‚Üí.*(\d+)\.\d+\.\d+') {
            $fromMajor = [int]$matches[1]
            $toMajor = [int]$matches[2]
            # Only consider it major if it's a significant jump and in right context
            if ($toMajor -gt $fromMajor -and $fromMajor -lt 10 -and $toMajor -lt 10) {
              $isMajor = $true
              Write-Output "‚úì Major version detected: version jump from $fromMajor.x.x to $toMajor.x.x"
            }
          }
          
          # Pattern 3: Check for Renovate update table format
          if ($prBody -match "Update.*Change.*Notes" -and $prBody -match "major") {
            $isMajor = $true
            Write-Output "‚úì Major version detected: found in Renovate update table"
          }
          
          # Pattern 4: Check for semver major bump indicators
          if ($prBody -match "BREAKING.*CHANGE" -or $prBody -match "breaking.*change") {
            $isMajor = $true
            Write-Output "‚úì Major version detected: breaking change mentioned"
          }
          
          # Pattern 5: Check for specific Renovate table format with arrows
          if ($prBody -match "\d+\.\d+\.\d+.*‚Üí.*\d+\.\d+\.\d+" -and $prBody -match "major") {
            $isMajor = $true
            Write-Output "‚úì Major version detected: Renovate update table with major change"
          }
          
          Write-Output "is_major=$isMajor" >> $env:GITHUB_OUTPUT
          
          if ($isMajor) {
            Write-Output "üö´ MAJOR UPDATE DETECTED - Automerge will be SKIPPED"
          } else {
            Write-Output "‚úÖ Minor/Patch update - Automerge will proceed"
          }

      - name: Add approved-to-merge label to PR
        if: steps.changed_apps.outputs.any_changed == 'true' && steps.check_major.outputs.is_major == 'false' && success()
        run: |
          gh pr edit ${{ github.event.pull_request.number }} --add-label "approved-to-merge"
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Enable automerge for approved PR
        if: steps.changed_apps.outputs.any_changed == 'true' && steps.check_major.outputs.is_major == 'false' && success()
        run: |
          gh pr merge --squash --auto ${{ github.event.pull_request.number }}
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Skip automerge for major updates
        if: steps.changed_apps.outputs.any_changed == 'true' && steps.check_major.outputs.is_major == 'true'
        run: |
          echo "üö´ Major version update detected - manual review required"
          echo "::warning::This PR contains a major version update and requires manual review before merging"
          gh pr edit ${{ github.event.pull_request.number }} --add-label "major-update" --add-label "needs-review"
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  # Job for manual contributions - validates configurations only
  validate-manual-changes:
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request' && !(github.actor == 'renovate[bot]' || contains(github.event.pull_request.user.login, 'renovate'))
    needs: debug-context
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Get list of apps changed in the PR
        id: changed_apps
        uses: tj-actions/changed-files@v46
        with:
          files: |
            apps/*/docker-compose.json
            apps/*/config.json
            apps/*/metadata/**

      - name: Validate JSON syntax
        if: steps.changed_apps.outputs.any_changed == 'true'
        shell: pwsh
        env:
          CHANGED_FILES: ${{ steps.changed_apps.outputs.all_changed_files }}
        run: |
          $hasErrors = $false
          $changedFiles = $env:CHANGED_FILES -split ' '
          
          Write-Output "üìã Validating JSON files for manual contribution..."
          
          foreach ($file in $changedFiles) {
            if ($file -match '\.(json)$') {
              Write-Output "üîç Validating JSON syntax: $file"
              try {
                $content = Get-Content $file -Raw | ConvertFrom-Json
                Write-Output "‚úÖ Valid JSON: $file"
              }
              catch {
                Write-Output "‚ùå Invalid JSON: $file"
                Write-Output "Error: $($_.Exception.Message)"
                $hasErrors = $true
              }
            }
          }
          
          if ($hasErrors) {
            Write-Output "‚ùå JSON validation failed"
            exit 1
          } else {
            Write-Output "‚úÖ All JSON files are valid"
          }

      - name: Validate config.json structure
        if: steps.changed_apps.outputs.any_changed == 'true'
        shell: pwsh
        env:
          CHANGED_FILES: ${{ steps.changed_apps.outputs.all_changed_files }}
        run: |
          $hasErrors = $false
          $changedFiles = $env:CHANGED_FILES -split ' '
          
          foreach ($file in $changedFiles) {
            if ($file -match 'config\.json$') {
              Write-Output "üîç Validating config structure: $file"
              $config = Get-Content $file -Raw | ConvertFrom-Json
              
              # Check required fields
              $requiredFields = @('id', 'available', 'port', 'name', 'description', 'tipi_version')
              foreach ($field in $requiredFields) {
                if (-not $config.PSObject.Properties.Name.Contains($field)) {
                  Write-Output "‚ùå Missing required field '$field' in $file"
                  $hasErrors = $true
                }
              }
              
              # Check port is numeric
              if ($config.port -and $config.port -notmatch '^\d+$') {
                Write-Output "‚ùå Port must be numeric in $file"
                $hasErrors = $true
              }
              
              if (-not $hasErrors) {
                Write-Output "‚úÖ Valid config structure: $file"
              }
            }
          }
          
          if ($hasErrors) {
            Write-Output "‚ùå Config validation failed"
            exit 1
          } else {
            Write-Output "‚úÖ All config files are valid"
          }

      - name: Test Docker Compose validity
        if: steps.changed_apps.outputs.any_changed == 'true'
        shell: bash
        env:
          CHANGED_FILES: ${{ steps.changed_apps.outputs.all_changed_files }}
        run: |
          hasErrors=false
          
          echo "üîç Testing Docker Compose configurations..."
          
          for file in $CHANGED_FILES; do
            if [[ $file == *"docker-compose.json" ]]; then
              echo "üîç Testing Docker Compose: $file"
              if docker-compose -f "$file" config > /dev/null 2>&1; then
                echo "‚úÖ Valid Docker Compose: $file"
              else
                echo "‚ùå Invalid Docker Compose: $file"
                docker-compose -f "$file" config
                hasErrors=true
              fi
            fi
          done
          
          if [ "$hasErrors" = true ]; then
            echo "‚ùå Docker Compose validation failed"
            exit 1
          else
            echo "‚úÖ All Docker Compose files are valid"
          fi

      - name: Validation Summary
        if: always()
        run: |
          echo "üìã Configuration validation completed for PR #${{ github.event.pull_request.number }}"
          echo "üîç Changed files: ${{ steps.changed_apps.outputs.all_changed_files }}"
          echo "‚ÑπÔ∏è  This PR requires manual review as it's not from Renovate Bot"
