#!/usr/bin/env pwsh

<#
.SYNOPSIS
    Diagnose why Renovate workflow is not triggering
.DESCRIPTION
    This script analyzes the workflow configuration and GitHub settings to identify
    why the update-configs-renovate workflow is not executing for Renovate PRs.
#>

param(
    [string]$PrNumber = "38",
    [string]$RepoPath = "."
)

Write-Host "üîç Diagnostic du probl√®me de workflow Renovate" -ForegroundColor Cyan
Write-Host "=================================================" -ForegroundColor Cyan

# Check current directory
$currentDir = Get-Location
Write-Host "üìÇ R√©pertoire actuel: $currentDir" -ForegroundColor Yellow

# Check if we're in a git repository
if (-not (Test-Path ".git")) {
    Write-Error "‚ùå Pas dans un d√©p√¥t Git. Naviguez vers le r√©pertoire du d√©p√¥t."
    exit 1
}

# Check workflow file exists
$workflowFile = ".github/workflows/update-configs-renovate.yml"
if (-not (Test-Path $workflowFile)) {
    Write-Error "‚ùå Fichier workflow non trouv√©: $workflowFile"
    exit 1
}

Write-Host "‚úÖ Fichier workflow trouv√©: $workflowFile" -ForegroundColor Green

# Check workflow triggers
Write-Host "`nüìã Analyse des d√©clencheurs du workflow:" -ForegroundColor Cyan
$workflowContent = Get-Content $workflowFile -Raw
if ($workflowContent -match "on:\s*\n\s*push:|on:\s*\n\s*pull_request:") {
    Write-Host "‚úÖ D√©clencheurs configur√©s (push/pull_request)" -ForegroundColor Green
} else {
    Write-Host "‚ùå D√©clencheurs non trouv√©s ou mal configur√©s" -ForegroundColor Red
}

# Check if condition exists
if ($workflowContent -match "if:\s*github\.actor\s*==\s*'renovate\[bot\]'") {
    Write-Host "‚úÖ Condition Renovate trouv√©e: github.actor == 'renovate[bot]'" -ForegroundColor Green
} else {
    Write-Host "‚ùå Condition Renovate non trouv√©e ou mal configur√©e" -ForegroundColor Red
}

# Check recent commits for Renovate activity
Write-Host "`nüîç Recherche de l'activit√© Renovate r√©cente:" -ForegroundColor Cyan
try {
    $renovateCommits = git log --oneline --author="renovate" --since="7 days ago" 2>$null
    if ($renovateCommits) {
        Write-Host "‚úÖ Commits Renovate trouv√©s dans les 7 derniers jours:" -ForegroundColor Green
        $renovateCommits | ForEach-Object { Write-Host "  - $_" -ForegroundColor Gray }
    } else {
        Write-Host "‚ö†Ô∏è  Aucun commit Renovate trouv√© dans les 7 derniers jours" -ForegroundColor Yellow
    }
} catch {
    Write-Host "‚ùå Erreur lors de la recherche des commits Renovate: $_" -ForegroundColor Red
}

# Check for Renovate branches
Write-Host "`nüîç Recherche des branches Renovate:" -ForegroundColor Cyan
try {
    $renovateBranches = git branch -a | Where-Object { $_ -match "renovate" }
    if ($renovateBranches) {
        Write-Host "‚úÖ Branches Renovate trouv√©es:" -ForegroundColor Green
        $renovateBranches | ForEach-Object { Write-Host "  - $_" -ForegroundColor Gray }
    } else {
        Write-Host "‚ö†Ô∏è  Aucune branche Renovate trouv√©e" -ForegroundColor Yellow
    }
} catch {
    Write-Host "‚ùå Erreur lors de la recherche des branches: $_" -ForegroundColor Red
}

# Check GitHub Actions status
Write-Host "`nüîç V√©rification du statut GitHub Actions:" -ForegroundColor Cyan
try {
    $actionsEnabled = Test-Path ".github/workflows"
    if ($actionsEnabled) {
        Write-Host "‚úÖ R√©pertoire .github/workflows existe" -ForegroundColor Green
        $workflowFiles = Get-ChildItem ".github/workflows" -Filter "*.yml" -Recurse
        Write-Host "üìù Fichiers de workflow trouv√©s:" -ForegroundColor Yellow
        $workflowFiles | ForEach-Object { Write-Host "  - $($_.Name)" -ForegroundColor Gray }
    }
} catch {
    Write-Host "‚ùå Erreur lors de la v√©rification: $_" -ForegroundColor Red
}

# Check for duplicate or conflicting workflows
Write-Host "`nüîç Recherche de workflows en conflit:" -ForegroundColor Cyan
$potentialConflicts = @(
    ".github/workflows/auto-merge.yml",
    ".github/workflows/validate-configs.yml",
    ".github/workflows/renovate.yml"
)

foreach ($conflict in $potentialConflicts) {
    if (Test-Path $conflict) {
        Write-Host "‚ö†Ô∏è  Workflow potentiellement en conflit trouv√©: $conflict" -ForegroundColor Yellow
    }
}

# Check Renovate configuration
Write-Host "`nüîç V√©rification de la configuration Renovate:" -ForegroundColor Cyan
$renovateConfigs = @(
    ".github/renovate.json",
    "renovate.json",
    ".renovaterc.json"
)

foreach ($config in $renovateConfigs) {
    if (Test-Path $config) {
        Write-Host "‚úÖ Configuration Renovate trouv√©e: $config" -ForegroundColor Green
        try {
            $renovateConfig = Get-Content $config | ConvertFrom-Json
            if ($renovateConfig.automerge -eq $false) {
                Write-Host "‚úÖ automerge: false configur√© (laisse le workflow g√©rer le merge)" -ForegroundColor Green
            } elseif ($renovateConfig.automerge -eq $true) {
                Write-Host "‚ö†Ô∏è  automerge: true configur√© (peut interf√©rer avec le workflow)" -ForegroundColor Yellow
            }
        } catch {
            Write-Host "‚ùå Erreur lors de l'analyse de la configuration: $_" -ForegroundColor Red
        }
    }
}

# Recommendations
Write-Host "`nüí° Recommandations pour r√©soudre le probl√®me:" -ForegroundColor Cyan
Write-Host "=================================================" -ForegroundColor Cyan

Write-Host "1. V√©rifiez que GitHub Actions est activ√© dans les param√®tres du d√©p√¥t" -ForegroundColor Yellow
Write-Host "2. V√©rifiez les permissions du token GITHUB_TOKEN" -ForegroundColor Yellow
Write-Host "3. Assurez-vous qu'il n'y a pas de workflows en conflit" -ForegroundColor Yellow
Write-Host "4. V√©rifiez que Renovate utilise bien 'renovate[bot]' comme nom d'utilisateur" -ForegroundColor Yellow
Write-Host "5. Testez le workflow manuellement avec workflow_dispatch" -ForegroundColor Yellow

# Test workflow syntax
Write-Host "`nüîç Test de la syntaxe du workflow:" -ForegroundColor Cyan
try {
    # Basic YAML syntax check (PowerShell doesn't have a built-in YAML parser)
    $yamlContent = Get-Content $workflowFile -Raw
    if ($yamlContent -match "name:|on:|jobs:") {
        Write-Host "‚úÖ Structure YAML de base valide" -ForegroundColor Green
    } else {
        Write-Host "‚ùå Structure YAML invalide" -ForegroundColor Red
    }
} catch {
    Write-Host "‚ùå Erreur lors du test de syntaxe: $_" -ForegroundColor Red
}

Write-Host "`nüèÅ Diagnostic termin√©" -ForegroundColor Cyan
